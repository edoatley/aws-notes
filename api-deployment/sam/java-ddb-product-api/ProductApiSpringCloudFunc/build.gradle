plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$dependencyManagementVersion"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
    id 'org.springframework.boot.experimental.thin-launcher' version "1.0.31.RELEASE"
}

group = 'uk.edoatley.springfunction.product' // Changed group
version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
    mavenCentral()
}

assemble.dependsOn = [thinJar, shadowJar]

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

// SAM looks for this qualifier and so needed this to make it work
thinJar {
    archiveClassifier = 'plain'
}

shadowJar.mustRunAfter thinJar

import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
    archiveClassifier = 'aws'
    manifest {
        inheritFrom(project.tasks.thinJar.manifest)
    }
    // Required for Spring
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    append 'META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports'
    append 'META-INF/spring/org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration.imports'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
        mavenBom "software.amazon.awssdk:bom:${awsSdkVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws'
    implementation 'org.springframework.cloud:spring-cloud-function-context'

    // AWS SDK for DynamoDB
    implementation 'software.amazon.awssdk:dynamodb'
    implementation 'software.amazon.awssdk:dynamodb-enhanced'

    // Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Events
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.amazonaws:aws-lambda-java-events:3.13.0'

    // Test dependencies
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:localstack'
}

// By default, Java removes parameter names during compilation for optimization.
// To retain parameter names, we need to add the '-parameters' compiler argument.
tasks.withType(JavaCompile) {
    options.compilerArgs.add('-parameters')
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat 'full'
    }
    testLogging.showStandardStreams = true
    testLogging.showExceptions = true
}