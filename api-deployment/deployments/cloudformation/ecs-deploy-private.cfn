AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Spring Boot API deployment to ECS'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, test, prod]
  
  DynamoDBTableName:
    Type: String
    Description: Table the product data is saved to
    Default: products

  ContainerPort:
    Type: Number
    Description: Port the service starts on
    Default: 8080
  
  ECRImageNameTag:
    Type: String
    Description: Image name and Tag to deploy
    Default: "product-api:v1"

  # Can lookup prefix lists with aws cli:
  # aws ec2 describe-managed-prefix-lists --region eu-west-2 --filters "Name=prefix-list-name,Values=com.amazonaws.eu-west-2.dynamodb"
  S3PrefixList:
    Type: String
    Description: >
      Prefix List for S3 access - Gateway VPC endpoints access S3 via this prefix list (of public IPs)
      Select the 'com.amazonaws.<region>.s3' prefix list.
    Default: "pl-7ca54015"

  DDBPrefixList:
    Type: String
    Description: >
      Prefix List for DynamoDB access - Gateway VPC endpoints access DynamoDB via this prefix list (of public IPs)
      Select the 'com.amazonaws.<region>.dynamodb' prefix list.
    Default: "pl-b3a742da"

  # Used to control FlowLogsGroup
  CreateNewFlowLogsLogGroup:
    Type: String
    Default: "false"
    AllowedValues: [ "true", "false" ]
    Description: "Set to 'false' if the VPC Flow Logs Log Group already exists and should be reused."

Conditions:
  ShouldCreateFlowLogsLogGroup: !Equals [!Ref CreateNewFlowLogsLogGroup, "true"]

Resources:

  # ############################
  # Basic Networking Configuration
  # ############################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRT

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # ############################
  # Network Load Balancer - loadbalances across ECS tasks
  # ############################
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nlb

  NLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Network Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16  # Allow traffic from VPC.  Ideally, this would be restricted to the API Gateway's IP range, if known, or a more specific subnet.
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nlb-sg

  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP

  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      Port: !Ref ContainerPort
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPort: !Ref ContainerPort  # Add explicit health check port
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-tg

  # VPC Link for API Gateway -> NetworkLoadBalancer
  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: !Sub ${AWS::StackName}-vpclink
      TargetArns:
        - !Ref NetworkLoadBalancer

  # ############################
  # DynamoDB
  # ############################
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-${DynamoDBTableName}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      
  # ############################
  # ECS Cluster Configuration
  # ############################

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-task
      RequiresCompatibilities: 
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: api-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRImageNameTag}"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: !Ref Environment
            - Name: DYNAMO_TABLENAME
              Value: !Sub ${AWS::StackName}-${DynamoDBTableName}
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub "curl -f http://localhost:${ContainerPort}/actuator/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${AWS::StackName}-service"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api-container
              awslogs-create-group: true

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - NetworkLoadBalancer
      - ECRDkrEndpoint
      - ECRApiEndpoint
      - S3Endpoint
      - CloudWatchLogsEndpoint
      - ECSServiceEndpoint # Add dependencies for the new endpoints
      - ECSAgentEndpoint
      - ECSTelemetryEndpoint
    Properties:
      ServiceName: !Sub ${AWS::StackName}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref NLBTargetGroup
          ContainerName: api-container
          ContainerPort: !Ref ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: DISABLED
      HealthCheckGracePeriodSeconds: 120  # Give tasks time to start
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: false
        MaximumPercent: 200
        MinimumHealthyPercent: 50


  # ############################
  # IAM Roles and Policies
  # ############################

  # Execution role - used by ECS to pull the image from ECR and write logs to CloudWatch
  # Task role - used by the ECS task to access DynamoDB and CloudWatch logs
  # ECS Security Group - used by the ECS task to allow traffic only from the load balancer
  
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${AWS::StackName}*" # Need to double check this after a full recreate

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt DynamoDBTable.Arn
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${AWS::StackName}-service:*'


  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:  # Allow outbound HTTPS traffic to VPC endpoints
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationSecurityGroupId: !Ref VPCEndpointSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationPrefixListId: !Ref S3PrefixList # Gateway VPC Endpoints use the public IP addresses of S3
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationPrefixListId: !Ref DDBPrefixList # Gateway VPC Endpoints use the public IP addresses of DDB

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16

  # ############################
  # VPC Flow Logs
  # ############################

  FlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FlowLogsToCloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vpcflowlogs/${AWS::StackName}:*" # More specific resource
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-FlowLogsRole

  FlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateFlowLogsLogGroup # Only create if condition is met
    Properties:
      LogGroupName: !Sub /aws/vpcflowlogs/${AWS::StackName}
      RetentionInDays: 7 # Adjust retention as needed

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      # Monitor the VPC
      ResourceType: VPC
      ResourceId: !Ref VPC
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Sub /aws/vpcflowlogs/${AWS::StackName}
      TrafficType: ALL # Capture which traffic (ALL, ACCEPT, or REJECT)
      MaxAggregationInterval: 60 # Aggregation interval in seconds (60 or 600)
      # For more detailed logs we will leverage a custom log format:
      LogFormat: "${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status} ${vpc-id} ${subnet-id} ${instance-id} ${tcp-flags} ${type} ${pkt-srcaddr} ${pkt-dstaddr} ${region} ${az-id} ${sublocation-type} ${sublocation-id} ${pkt-src-aws-service} ${pkt-dst-aws-service} ${flow-direction} ${traffic-path}"

  # ############################
  # VPC Endpoints - private access to AWS services
  # ############################
  
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
#              AWS: !GetAtt TaskRole.Arn
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: !GetAtt DynamoDBTable.Arn
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId: !Ref VPC

  # ECR Docker Registry 
  ECRDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # ECR API Endpoints
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # S3 Endpoint - used for ECR and CloudWatch logs
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject' # This is the primary action needed by ECR to download layers
            Resource: '*' # Allows the ExecutionRole to access any S3 bucket it has IAM permissions for, via this endpoint
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  ECSServiceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecs'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup # Use the same SG as other interface endpoints

  ECSAgentEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecs-agent'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  ECSTelemetryEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecs-telemetry'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  APIRateLimit:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: !Sub ${AWS::StackName}-ratelimit
        Scope: REGIONAL
        DefaultAction:
          Allow: {}
        Rules:
          - Name: RateLimit
            Priority: 1
            Statement:
              RateBasedStatement:
                Limit: 2000  # Requests per 5 minutes per IP
                AggregateKeyType: IP
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: !Sub ${AWS::StackName}-ratelimit
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: !Sub ${AWS::StackName}-acl

  # ############################
  # API Gateway
  # ############################

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGateway

  ApiGatewayProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayProxyResource
      RestApiId: !Ref ApiGateway
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        Uri: !Sub http://${NetworkLoadBalancer.DNSName}/{proxy}
        RequestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        Uri: !Sub http://${NetworkLoadBalancer.DNSName}/
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayProxyMethod
      - ApiGatewayRootMethod
      - VpcLink
      - NetworkLoadBalancer
    Properties:
      RestApiId: !Ref ApiGateway

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn:
      - ApiGateway
      - ApiGatewayDeployment
      - ApiGatewayStage
    Properties:
      ResourceArn: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/${Environment}
      WebACLArn: !GetAtt APIRateLimit.Arn

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
  
  ServiceName:
    Description: ECS Service Name
    Value: !Ref ECSService
  
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref DynamoDBTable

  ApiEndpoint:
    Description: API Gateway Endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
