AWSTemplateFormatVersion: 2010-09-09
Description: EKS Cluster with ECR Registry

Mappings:
  VpcIpRanges:
    Option1:
      VPC: 10.0.0.0/16       
      Subnet1: 10.0.0.0/18
      Subnet2: 10.0.64.0/18
      Subnet3: 10.0.128.0/18
      Subnet4: 10.0.192.0/18

Parameters:
  NumWorkerNodes:
    Type: Number
    Description: Desired number of worker nodes
    Default: 2
    MinValue: 1
    MaxValue: 10

  NodeInstanceType:
    Type: String
    Description: EC2 instance type for the worker nodes (For small EKS nodes, consider using burstable instance types like t3.small, t3.medium, or t3.large, or general-purpose instances like m5.large or m6i.large)
    Default: t3.small

  KubernetesVersion:
    Type: String
    Description: Kubernetes version for the EKS cluster
    Default: 1.31

Resources:

# ##########################################################
# VPC and Subnets
# ##########################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, VPC ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"

  PublicSnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, Subnet1 ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-pub-snet-1"

  PublicSnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, Subnet2 ]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-pub-snet-2"

  PrivateSnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, Subnet3 ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-priv-snet-1"

  PrivateSnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, Subnet4 ]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-priv-snet-2"

# ##########################################################
# Igw and routing
# ##########################################################

# Internet Gateway - used to allow public subnets to access the internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"

  VpcIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Public Routing
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rtb-public"
  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSnet1
      RouteTableId: !Ref RouteTablePublic
  SubnetRouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSnet2
      RouteTableId: !Ref RouteTablePublic

# Private Routing
  RouteTablePrivate1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rtb-private-1"
  RouteTablePrivate2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rtb-private-2"
  SubnetRouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSnet1
      RouteTableId: !Ref RouteTablePrivate1
  SubnetRouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSnet2
      RouteTableId: !Ref RouteTablePrivate2

# ##########################################################
# VPC Endpoint for S3
# ##########################################################
  VpcEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Join ['', ['com.amazonaws.', !Ref 'AWS::Region', '.s3']]
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref RouteTablePrivate1
        - !Ref RouteTablePrivate2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpce-s3"
  
# ##########################################################
# IAM - EKS Cluster Roles
# ##########################################################
  IAMAmazonEKSAutoNodeRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
      RoleName: AmazonEKSAutoNodeRole
      Description: "Allows EKS nodes to connect to EKS Auto Mode clusters and to pull\
        \ container images from ECR."
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow"
          Principal:
            Service: ec2.amazonaws.com
  IAMAmazonEKSAutoClusterRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy
      - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
      - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
      - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
      RoleName: AmazonEKSAutoClusterRole
      Description: "Allows access to other AWS service resources that are required\
        \ to operate Auto Mode clusters managed by EKS."
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          - sts:TagSession
          Effect: "Allow"
          Principal:
            Service: eks.amazonaws.com
  IAMEksControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      RoleName: EksControlPlaneRole
      Description: "Allows EKS control plane to manage the cluster"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

# ##########################################################
# EKS Cluster
# ##########################################################

  # Create a new keypair for the AWS worker node
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Ref KeyPairName
      KeyType: rsa
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-keypair"


  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref AWS::StackName
      Version: "1.10"
      RoleArn: !GetAtt ControlPlaneRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PrivateSnet1
          - !Ref PrivateSnet2
  
  # Control plane security groups
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the elastic network interfaces between the control plane and the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"
  ControlPlaneIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  ControlPlaneEgressToWorkerNodesKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic (TCP/10250) to worker nodes
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  ControlPlaneEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods running extension API servers)
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # Worker nodes security group
  # Note: default egress rule (allow all traffic to all destinations) applies
  WorkerNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WorkerNodesSecurityGroup"
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"
  WorkerNodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: "-1"
  WorkerNodesIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming kubelet traffic (TCP/10250) from control plane 
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  WorkerNodesIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # # Worker nodes (auto-scaling group)
  WorkerNodesAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
    Properties:
      LaunchConfigurationName: !Ref WorkerNodesLaunchConfiguration
      MinSize: !Ref NumWorkerNodes
      MaxSize: !Ref NumWorkerNodes
      VPCZoneIdentifier:
          - !Ref PrivateSnet1
          - !Ref PrivateSnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WorkerNodesAutoScalingGroup"
          PropagateAtLaunch: true
        # Without this tag, worker nodes are unable to join the cluster:
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"
          PropagateAtLaunch: true
  WorkerNodesLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    # Wait until cluster is ready before launching worker nodes
    DependsOn: ControlPlane
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref WorkerNodesInstanceProfile
    ImageId: !Sub
      - "{{resolve:ssm:/aws/service/eks/optimized-ami/${Version}/amazon-linux-2/recommended/image_id}}"
      - Version: !Ref KubernetesVersion
    InstanceType: !Ref WorkerNodesInstanceType
    KeyName: !Ref KeyPairName
    SecurityGroups:
      - !Ref WorkerNodesSecurityGroup
    UserData:
      Fn::Base64: !Sub |
          #!/bin/bash
          set -o xtrace
          /etc/eks/bootstrap.sh ${ControlPlane}
          /opt/aws/bin/cfn-signal \
                          --exit-code $? \
                          --stack  ${AWS::StackName} \
                          --resource NodeGroup  \
                          --region ${AWS::Region}
  WorkerNodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WorkerNodesRole
        
  WorkerNodesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly


# ##########################################################
# Outputs
# ##########################################################
  Outputs:
    VPC:
      Description: A reference to the created VPC
      Value: !Ref VPC
      Export:
        Name: VPC

    PublicSubnets:
      Description: A list of the public subnets
      Value: !Join [ ",", [ !Ref SubnetPublic1, !Ref SubnetPublic2 ]]
      Export:
        Name: PublicSubnets

    PrivateSubnets:
      Description: A list of the private subnets
      Value: !Join [ ",", [ !Ref SubnetPrivate1, !Ref SubnetPrivate2 ]]
      Export:
        Name: PrivateSubnets

    VPCEndpointS3:
      Description: A reference to the created VPC Endpoint for S3
      Value: !Ref VPCEndpointS3
      Export:
      Name: VPCEndpointS3